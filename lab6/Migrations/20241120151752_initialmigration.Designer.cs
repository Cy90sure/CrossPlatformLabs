// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using lab6.Data;

#nullable disable

namespace lab6.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241120151752_initialmigration")]
    partial class initialmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("lab6.Models.Country", b =>
                {
                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguagesSpoken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UsdExchangeDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("UsdExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CountryCode");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("lab6.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("LocationAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OtherDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.HasIndex("LocationTypeCode");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("lab6.Models.LocationType", b =>
                {
                    b.Property<string>("LocationTypeCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationTypeCode");

                    b.HasIndex("CountryCode");

                    b.ToTable("LocationTypes");
                });

            modelBuilder.Entity("lab6.Models.MovementLocation", b =>
                {
                    b.Property<int>("ShipmentLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShipmentLocationId"));

                    b.Property<DateTime>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStarted")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromLocationId")
                        .HasColumnType("int");

                    b.Property<string>("OtherDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShipmentId")
                        .HasColumnType("int");

                    b.Property<int>("ToLocationId")
                        .HasColumnType("int");

                    b.HasKey("ShipmentLocationId");

                    b.HasIndex("FromLocationId");

                    b.HasIndex("ShipmentId");

                    b.HasIndex("ToLocationId");

                    b.ToTable("MovementLocations");
                });

            modelBuilder.Entity("lab6.Models.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationId"));

                    b.Property<string>("OrganizationDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrganizationId");

                    b.HasIndex("OrganizationTypeCode");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("lab6.Models.OrganizationType", b =>
                {
                    b.Property<string>("OrganizationTypeCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrganizationTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizationTypeCode");

                    b.ToTable("OrganizationTypes");
                });

            modelBuilder.Entity("lab6.Models.ProductAndService", b =>
                {
                    b.Property<int>("ProductSvcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductSvcId"));

                    b.Property<string>("ProductSvcDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductSvcTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductSvcId");

                    b.HasIndex("ProductSvcTypeCode");

                    b.ToTable("ProductsAndServices");
                });

            modelBuilder.Entity("lab6.Models.ProductAndServiceType", b =>
                {
                    b.Property<string>("ProductSvcTypeCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductSvcTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductSvcTypeCode");

                    b.ToTable("ProductAndServiceTypes");
                });

            modelBuilder.Entity("lab6.Models.Shipment", b =>
                {
                    b.Property<int>("ShipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShipmentId"));

                    b.Property<int>("FromOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("ShipmentDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToOrganizationId")
                        .HasColumnType("int");

                    b.HasKey("ShipmentId");

                    b.HasIndex("FromOrganizationId");

                    b.HasIndex("ToOrganizationId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("lab6.Models.ShipmentProductAndService", b =>
                {
                    b.Property<int>("ShipmentId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSvcId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ShipmentId", "ProductSvcId");

                    b.HasIndex("ProductSvcId");

                    b.ToTable("ShipmentProductsAndServices");
                });

            modelBuilder.Entity("lab6.Models.Location", b =>
                {
                    b.HasOne("lab6.Models.LocationType", "LocationType")
                        .WithMany("Locations")
                        .HasForeignKey("LocationTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LocationType");
                });

            modelBuilder.Entity("lab6.Models.LocationType", b =>
                {
                    b.HasOne("lab6.Models.Country", "Country")
                        .WithMany("LocationTypes")
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("lab6.Models.MovementLocation", b =>
                {
                    b.HasOne("lab6.Models.Location", "FromLocation")
                        .WithMany("MovementLocationsFrom")
                        .HasForeignKey("FromLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lab6.Models.Shipment", "Shipment")
                        .WithMany("MovementLocations")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lab6.Models.Location", "ToLocation")
                        .WithMany("MovementLocationsTo")
                        .HasForeignKey("ToLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromLocation");

                    b.Navigation("Shipment");

                    b.Navigation("ToLocation");
                });

            modelBuilder.Entity("lab6.Models.Organization", b =>
                {
                    b.HasOne("lab6.Models.OrganizationType", "OrganizationType")
                        .WithMany("Organizations")
                        .HasForeignKey("OrganizationTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrganizationType");
                });

            modelBuilder.Entity("lab6.Models.ProductAndService", b =>
                {
                    b.HasOne("lab6.Models.ProductAndServiceType", "ProductSvcType")
                        .WithMany("ProductsAndServices")
                        .HasForeignKey("ProductSvcTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductSvcType");
                });

            modelBuilder.Entity("lab6.Models.Shipment", b =>
                {
                    b.HasOne("lab6.Models.Organization", "FromOrganization")
                        .WithMany("ShipmentsFrom")
                        .HasForeignKey("FromOrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lab6.Models.Organization", "ToOrganization")
                        .WithMany("ShipmentsTo")
                        .HasForeignKey("ToOrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromOrganization");

                    b.Navigation("ToOrganization");
                });

            modelBuilder.Entity("lab6.Models.ShipmentProductAndService", b =>
                {
                    b.HasOne("lab6.Models.ProductAndService", "ProductSvc")
                        .WithMany("ShipmentProducts")
                        .HasForeignKey("ProductSvcId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lab6.Models.Shipment", "Shipment")
                        .WithMany("ShipmentProducts")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductSvc");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("lab6.Models.Country", b =>
                {
                    b.Navigation("LocationTypes");
                });

            modelBuilder.Entity("lab6.Models.Location", b =>
                {
                    b.Navigation("MovementLocationsFrom");

                    b.Navigation("MovementLocationsTo");
                });

            modelBuilder.Entity("lab6.Models.LocationType", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("lab6.Models.Organization", b =>
                {
                    b.Navigation("ShipmentsFrom");

                    b.Navigation("ShipmentsTo");
                });

            modelBuilder.Entity("lab6.Models.OrganizationType", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("lab6.Models.ProductAndService", b =>
                {
                    b.Navigation("ShipmentProducts");
                });

            modelBuilder.Entity("lab6.Models.ProductAndServiceType", b =>
                {
                    b.Navigation("ProductsAndServices");
                });

            modelBuilder.Entity("lab6.Models.Shipment", b =>
                {
                    b.Navigation("MovementLocations");

                    b.Navigation("ShipmentProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
